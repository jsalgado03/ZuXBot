#include "pch.h"
#include <conio.h>
#include <iostream>
#include <windows.h>
#include <mmsystem.h>

using namespace std;
using namespace System;

void Dibujar_mapa1(int** mapa)
{
	for (int i = 0; i < 25; i++)
	{
		for (int j = 0; j < 80; j++)
		{
			if (mapa[i][j] == 1 || mapa[i][j] == 18 || mapa[i][j] == 70 || mapa[i][j] == 60 || mapa[i][j] == 72 || mapa[i][j] == 19)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Black;
				cout << char(219);
			}
			if (mapa[i][j] == 2 || mapa[i][j] == 20 || mapa[i][j] == 32)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkRed;
				cout << char(219);
			}
			if (mapa[i][j] == 3 || mapa[i][j] == 14 || mapa[i][j] == 20)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkYellow;
				cout << char(219);
			}
			if (mapa[i][j] == 4 || mapa[i][j] == 25 || mapa[i][j] == 30 || mapa[i][j] == 35 || mapa[i][j] == 40 || mapa[i][j] == 80 || mapa[i][j] == 85)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(219);
			}
			if (mapa[i][j] == 5)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Cyan;
				cout << char(178);
			}
			if (mapa[i][j] == 6 || mapa[i][j] == 16)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(219);
			}
			if (mapa[i][j] == 7 || mapa[i][j] == 75)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkMagenta;
				cout << char(219);
			}
			if (mapa[i][j] == 8 || mapa[i][j] == 45 || mapa[i][j] == 50 || mapa[i][j] == 55)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkGreen;
				cout << char(219);
			}
			if (mapa[i][j] == 9 || mapa[i][j] == 65 || mapa[i][j] == 70)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkGray;
				cout << char(219);
			}
			if (mapa[i][j] == 10)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Gray;
				cout << char(219);
			}
			if (mapa[i][j] == 11)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(219);
			}
			if (mapa[i][j] == 12)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkCyan;
				cout << char(178);
			}
			if (mapa[i][j] == 13)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::DarkBlue;
				cout << char(219);
			}
			if (mapa[i][j] == 17)
			{
				Console::SetCursorPosition(j, i);
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(176);
			}

		}
	}
}

void cursorMenu(int& opcionMenu, int& numeroMapa, int& seleccionCursor)
{
	//movimiento cursor en el Menu

	if (_kbhit())
	{
		char teclapresionada = _getch();
		teclapresionada = toupper(teclapresionada);
		switch (teclapresionada)
		{
		case 75: opcionMenu = 1; seleccionCursor = 10; break;
		case 77: opcionMenu = 2; seleccionCursor = 40; break;
		case 13: opcionMenu = 3;
		}
	}

	//1: jugar, 2:salir 
	if (opcionMenu == 1)
	{
		Console::SetCursorPosition(17, 10);
		Console::ForegroundColor = ConsoleColor::Gray;
		Console::BackgroundColor = ConsoleColor::Black;
		cout << char(16);

		Console::SetCursorPosition(54, 10);
		Console::BackgroundColor = ConsoleColor::Black;
		cout << " ";
	}
	else if (opcionMenu == 2)
	{
		Console::SetCursorPosition(17, 10);
		Console::BackgroundColor = ConsoleColor::Black;
		cout << " ";

		Console::SetCursorPosition(54, 10);
		Console::ForegroundColor = ConsoleColor::Gray;
		Console::BackgroundColor = ConsoleColor::Black;
		cout << char(16);
	}
	else if (opcionMenu == 3)
	{
		if (seleccionCursor == 10) numeroMapa = 1; //hace que comience el juego
		else if (seleccionCursor == 40) numeroMapa = 0; //hace que se salga del juego
	}
}

void menu(int** mapa)
{
	int matriz[20][80] = { { 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 80; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);

	//impresion del texto
	Console::ForegroundColor = ConsoleColor::Gray;

	Console::SetCursorPosition(3, 1); cout << " ________   ___  ___      ___    ___  ________   ________   _________   ";
	Console::SetCursorPosition(3, 2); cout << "|\\_____  \\ |\\  \\|\\  \\    |\\  \\  /  /||\\   __  \\ |\\   __  \\ |\\___   ___\\";
	Console::SetCursorPosition(3, 3); cout << " \\|___/  /|\\ \\  \\\\\\  \\   \\ \\  \\/  / /\\ \\  \\|\\ /_\\ \\  \\|\\  \\\\|___ \\  \\_|";
	Console::SetCursorPosition(3, 4); cout << "     /  / / \\ \\  \\\\\\  \\   \\ \\    / /  \\ \\   __  \\\\ \\  \\\\\\  \\    \\ \\  \\";
	Console::SetCursorPosition(3, 5); cout << "    /  /_/__ \\ \\  \\\\\\  \\   /     \\/    \\ \\  \\|\\  \\\\ \\  \\\\\\  \\    \\ \\  \\";
	Console::SetCursorPosition(3, 6); cout << "   |\\________\\\\ \\_______\\ /  /\\   \\     \\ \\_______\\\\ \\_______\\    \\ \\__\\";
	Console::SetCursorPosition(3, 7); cout << "    \\|_______| \\|_______|/__/ /\\ __\\     \\|_______| \\|_______|     \\|__|";
	Console::SetCursorPosition(3, 8); cout << "                         |__|/ \\|__|";

	Console::SetCursorPosition(19, 10);
	Console::ForegroundColor = ConsoleColor::White;
	cout << "JUGAR";

	Console::SetCursorPosition(56, 10);
	Console::ForegroundColor = ConsoleColor::White;
	cout << "SALIR";

	Console::SetCursorPosition(33, 14);
	Console::ForegroundColor = ConsoleColor::White;
	cout << "Copyright 2017�";

	Console::SetCursorPosition(17, 17);
	Console::ForegroundColor = ConsoleColor::White;
	cout << "Made in Peru : Franco Zapata & Juanelv Salgado";
}

void animacion_caida(int** matriz, int xpersonaje, int ypersonaje)
{
	for (int y = 3; y <= 18; y++)
	{
		Console::SetCursorPosition(xpersonaje, 0 + y - 3);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << " ";
		Console::SetCursorPosition(xpersonaje, 0 + y - 2);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(153);

		Console::SetCursorPosition(xpersonaje, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(178);

		Console::SetCursorPosition(xpersonaje - 1, 0 + y - 2);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << " ";

		Console::SetCursorPosition(xpersonaje - 1, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(47);

		Console::SetCursorPosition(xpersonaje + 1, 0 + y - 2);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << " ";

		Console::SetCursorPosition(xpersonaje + 1, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(92);

		Console::SetCursorPosition(xpersonaje, 0 + y);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(64);
		Sleep(17);
	}
}

void animacion_subida(int** matriz, int xpersonaje, int ypersonaje, int& energia)
{
	for (int y = 15; y >= 3; y--)
	{
		Console::SetCursorPosition(xpersonaje, 0 + y + 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << " ";
		Console::SetCursorPosition(xpersonaje, 0 + y - 2);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(153);

		Console::SetCursorPosition(xpersonaje, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(178);

		Console::SetCursorPosition(xpersonaje - 1, 0 + y);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << " ";

		Console::SetCursorPosition(xpersonaje - 1, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(47);

		Console::SetCursorPosition(xpersonaje + 1, 0 + y);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << " ";

		Console::SetCursorPosition(xpersonaje + 1, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(92);

		Console::SetCursorPosition(xpersonaje, 0 + y);
		Console::BackgroundColor = ConsoleColor::Black;
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(64);
		Sleep(100);
	}
	energia - 70;
}

void MapaHuecos(int** mapa)
{
	int matriz[20][70] = { { 18,10,10,10,10,10,18,18,18,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,18,18,10,10,10,10,10,18,18 },
	{ 18,18,10,10,10,18,18,18,18,18,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,18,18,18,18,10,10,10,18,18,18 },
	{ 18,18,18,10,18,18,18,18,18,18,18,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,18,18,18,18,18,18,10,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18 },
	{ 18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,9,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 10,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10 },
	{ 10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10 },
	{ 10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10 },
	{ 10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10 },
	{ 10,10,10,10,10,10,10,10,10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,10,10,10,10,10,10,10,10,10 },
	{ 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10 },
	{ 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa1(int** mapa)
{
	int matriz[20][70] = { { 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,8,8,8,8,17,8 },
	{ 8,8,8,8,8,8,8,8,17,8,8,8,8,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,8,8,17,8,8,17,8,8 },
	{ 8,8,8,8,8,8,17,8,8,17,8,8,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,8,17,8,17,17,8,8 },
	{ 8,8,8,8,8,8,8,17,8,17,8,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,17,8,8,8 },
	{ 8,8,8,8,8,8,8,8,17,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,17,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,17,17,3,3,8,8 },
	{ 8,8,8,8,8,8,8,3,3,17,17,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,17,17,17,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,8,8,8 },
	{ 8,8,8,8,8,8,8,8,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,17,17,17,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,8,8,8,8,2,2,2,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,3,3,8,8,8,3,3,3,8,8 },
	{ 8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,20 },
	{ 8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,20 },
	{ 8,8,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,8,8,3,3,2,2,2,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,3,3,20 },
	{ 8,8,8,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,3,3,3,3,8,8,8,8,8,8,8,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,8,8,8,17,8,8,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,8,17,8,8,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,5,5,5,5,5,3,3,3,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,17,17,17,17,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,5,5,5,5,5,5,5,5,3,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,17,17,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,5,5,5,5,3,3,3,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,8,8,8 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa2(int** mapa)
{
	int matriz[20][70] = { { 8,8,8,8,2,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,3,3,3,3,4,4,4,4,4,3,4,4,4,4,3,4,3,3,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,2,8,8,8,8 },
	{ 8,8,8,8,2,3,4,4,4,1,1,1,1,1,4,4,4,4,4,4,4,3,4,4,4,4,3,3,3,3,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,1,1,1,1,1,4,4,4,4,3,4,4,3,4,2,8,8,8,8 },
	{ 8,8,8,8,2,4,4,1,1,1,1,1,1,1,1,4,4,4,4,3,3,3,3,4,4,3,3,4,3,3,4,3,3,3,4,3,3,4,3,3,3,4,3,3,3,4,4,3,4,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,2,8,8,8,8 },
	{ 8,8,8,8,2,4,4,1,1,1,1,1,1,1,1,4,4,4,3,4,4,4,4,3,3,3,4,4,4,3,4,3,3,3,3,4,3,3,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,4,4,3,4,4,3,2,2,8,8,8,8 },
	{ 8,8,8,8,2,3,4,4,4,1,1,1,1,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,3,3,3,4,3,3,3,3,3,4,4,4,4,4,4,3,4,4,4,4,1,1,1,1,1,1,1,1,4,4,4,4,4,2,2,2,2,8,8,8,8 },
	{ 8,8,8,8,2,2,2,4,4,4,4,4,4,4,2,2,2,2,4,4,4,4,4,4,4,2,2,2,2,2,3,3,3,3,3,4,3,2,2,2,2,2,4,4,4,3,4,4,4,4,4,1,1,1,1,4,4,3,2,2,2,2,2,2,2,8,8,8,8,8 },
	{ 8,8,8,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,3,3,3,4,3,2,2,2,2,2,2,2,4,4,4,3,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,8,8,8,8,4,4,8 },
	{ 8,8,8,8,8,8,8,2,2,2,2,2,2,2,2,8,8,2,2,2,2,2,2,2,2,2,8,8,8,2,3,4,4,4,4,4,3,2,8,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,4,4,11,4 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,4,4,4,4,4,3,8,8,8,8,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,4,4,4,4,4,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3 },
	{ 8,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,3,3,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,3,3,8,8,3,3,3,3,3,3,3,3,3,4,30 },
	{ 3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,30 },
	{ 25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,30 },
	{ 25,4,4,4,4,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3 },
	{ 3,3,3,3,3,3,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,4,4,4,4,4,3,3,3,3,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,3,3,3,3,3,3,3,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,4,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,4,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,4,11,4,4,4,4,11,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,11,4,8,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,11,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,11,4,4,4,4,8,8,8,8,8,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa3(int** mapa)
{
	int matriz[20][70] = { { 5,5,5,8,8,8,8,8,8,8,8,11,11,11,11,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,13,13,13,13,8,8,8,8,8,3,3,8,8,8,8,8,8,8,8,5,5,5,5 },
	{ 5,5,8,8,8,8,8,8,8,8,11,1,1,1,1,11,8,8,8,8,8,3,3,3,8,3,8,8,3,3,8,8,8,8,3,3,8,8,8,3,3,8,8,8,16,16,16,16,13,13,13,13,8,3,3,3,8,3,8,8,8,8,8,8,8,8,8,8,5,5 },
	{ 5,8,8,8,8,8,3,3,8,11,1,1,1,1,1,1,11,8,8,8,8,8,3,3,3,3,3,3,3,8,8,8,8,8,8,3,8,8,8,8,3,8,8,16,16,16,16,16,16,13,9,9,8,8,8,3,8,8,8,8,8,8,8,3,3,8,8,8,8,8 },
	{ 8,8,8,8,8,8,8,3,8,2,11,1,1,1,1,11,2,8,8,8,8,3,8,8,8,3,3,3,8,8,3,3,8,8,8,3,3,3,8,8,8,8,8,10,10,10,10,10,10,9,9,9,3,8,8,8,8,8,8,8,3,3,3,8,8,8,8,3,8,3 },
	{ 8,8,8,8,8,3,8,3,8,8,2,11,11,11,11,2,8,8,8,8,3,3,3,8,8,8,8,8,8,8,3,3,3,8,8,8,8,8,8,8,8,3,3,10,10,7,7,10,10,9,9,9,3,3,8,8,8,8,8,3,3,8,8,8,8,8,3,3,8,3 },
	{ 3,8,8,8,8,3,3,3,3,8,11,2,2,2,2,11,8,8,8,3,3,8,8,8,3,3,8,3,3,8,8,8,8,8,8,8,8,8,8,8,3,3,3,10,10,7,7,10,10,9,9,3,3,3,3,3,8,8,8,8,8,8,8,8,8,3,8,8,8,3 },
	{ 4,3,3,8,8,8,8,8,3,3,3,11,11,11,11,3,3,3,3,3,8,8,8,8,8,8,3,8,8,8,8,8,3,3,3,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4 },
	{ 35,4,3,4,4,4,4,3,3,3,3,3,3,3,3,3,3,4,4,4,3,3,3,3,3,4,4,4,4,4,4,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,4,4,4,4,4,4,4,40 },
	{ 35,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,40 },
	{ 35,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,40 },
	{ 35,3,3,3,4,3,3,3,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,8,8,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,3,3,3,3,4,40 },
	{ 35,3,8,8,8,8,8,8,8,8,8,8,3,8,8,8,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3 },
	{ 3,8,8,8,8,3,8,8,8,8,3,3,3,3,8,8,8,8,8,8,8,8,11,11,11,11,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,11,8,8,8,8,8,8,8,3,3,3,8,8,8,8,3,3 },
	{ 8,8,8,8,8,3,3,3,8,8,3,3,8,8,8,8,3,3,8,8,8,11,1,1,1,1,11,8,8,3,3,8,8,8,8,8,8,3,3,3,3,3,3,3,3,8,8,8,8,11,1,1,1,1,11,8,8,3,3,3,3,8,8,8,8,3,3,8,8,8 },
	{ 8,8,8,8,8,8,8,3,8,8,3,3,8,8,8,3,3,8,8,8,11,1,1,1,1,1,1,11,8,8,8,3,3,3,8,8,8,8,8,8,8,3,3,3,8,8,8,8,11,1,1,1,1,1,1,11,8,8,3,8,8,8,8,8,3,3,3,8,8,8 },
	{ 2,8,8,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,11,1,1,1,1,11,2,8,8,8,8,8,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,11,1,1,1,1,11,2,8,8,8,8,8,8,8,3,3,8,8,8,8,2 },
	{ 2,2,8,8,8,8,8,8,3,8,3,8,8,8,3,8,8,8,8,8,8,2,11,11,11,11,2,8,8,8,8,8,8,8,8,8,8,3,3,3,8,8,8,8,8,8,8,3,3,2,11,11,11,11,2,8,8,8,8,8,3,3,8,8,8,8,8,8,2,2 },
	{ 5,2,2,2,2,2,8,8,8,3,3,8,8,3,3,8,8,3,3,3,3,11,2,2,2,2,11,3,3,3,3,8,8,8,3,3,3,3,3,3,8,8,8,3,3,3,3,3,3,11,2,2,2,2,11,3,3,8,8,3,3,8,8,8,2,2,2,2,2,5 },
	{ 5,5,2,2,2,2,2,8,8,8,8,3,8,8,3,3,8,8,3,3,3,3,11,11,11,11,3,3,3,3,8,8,8,3,8,8,3,3,8,8,8,8,3,8,8,8,3,3,3,3,11,11,11,11,3,3,3,3,3,3,8,8,8,2,2,2,2,2,5,5 },
	{ 5,5,5,5,5,5,2,2,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,8,8,8,8,8,8,2,2,5,5,5,5,5,5 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa4(int** mapa)
{
	int matriz[20][70] = { { 5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,8,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,8,8,8,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5 },
	{ 5,4,4,4,4,8,8,4,4,4,4,4,4,4,1,1,1,1,4,4,4,4,4,4,8,8,8,4,4,4,5,5,5,5,5,5,5,5,4,4,4,4,4,8,4,4,4,4,4,4,4,4,8,8,8,8,8,4,4,4,4,4,8,4,4,4,4,4,5,5 },
	{ 5,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,4,8,8,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4 },
	{ 4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,4,4,8,4,4,4,4,4,8,4,4,1,1,1,1,1,1,1,1,4,8,4,4,4,4,4,4,4,4 },
	{ 4,8,8,4,4,4,4,8,4,4,1,1,1,1,1,1,1,1,4,4,4,8,8,8,4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,8,4,8,8,4,8,4,4,8,4,1,1,1,1,1,1,1,1,1,4,8,8,8,8,4,4,4,8,4 },
	{ 4,8,4,4,4,8,4,4,8,4,4,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,8,8,8,8,4,4,5,5,5,5,4,4,4,4,4,8,4,4,4,4,8,8,8,8,4,1,1,1,1,1,1,1,1,4,4,8,4,8,8,4,4,4,4,4 },
	{ 4,4,4,4,4,8,8,4,4,4,4,4,4,8,8,4,4,8,8,8,8,4,4,4,4,4,4,8,8,8,4,4,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,1,1,1,1,1,4,4,8,8,4,4,4,4,4,4,4,4,4 },
	{ 4,4,4,4,4,4,4,4,4,8,8,4,4,4,8,8,4,4,8,8,4,4,4,4,4,4,4,4,4,4,14,14,14,14,14,14,14,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,8,8,8,4,8,4,4,4,4,4,4,4,4,4,4,4,4,8 },
	{ 45,8,8,8,8,8,4,4,4,4,8,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,14,14,14,6,6,6,6,6,14,14,14,4,4,4,4,8,4,4,4,4,4,4,8,8,4,4,8,8,4,4,4,4,4,4,4,4,4,4,4,4,4,50 },
	{ 45,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,8,8,8,4,4,4,4,4,4,4,14,14,6,6,6,6,6,6,6,6,6,14,14,4,4,4,4,8,8,4,8,8,4,8,8,8,8,8,8,8,4,4,4,4,8,4,4,8,8,8,8,8,50 },
	{ 45,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,14,14,14,6,6,6,6,6,6,6,6,6,6,6,14,14,14,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,50 },
	{ 45,8,4,4,4,4,4,4,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,6,6,14,14,14,14,14,14,14,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,8,50 },
	{ 4,8,4,4,8,8,8,4,4,4,8,8,8,4,4,4,8,8,8,4,4,4,8,8,8,8,8,6,14,14,14,5,5,5,5,5,14,14,14,6,8,8,8,8,8,8,4,8,4,4,8,4,4,4,8,8,8,8,8,8,4,4,4,4,8,8,4,4,4,4 },
	{ 4,4,4,4,4,4,4,4,4,4,4,4,8,4,4,4,8,4,4,4,4,4,4,8,8,8,8,14,14,14,12,12,12,12,12,12,12,14,14,14,8,8,8,8,8,4,4,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,8,8,4,4,4,4,4 },
	{ 4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,4,4,4,4,4,4,14,14,14,14,8,12,12,12,12,12,12,12,8,14,14,14,14,4,4,4,4,4,4,8,4,1,1,1,1,1,4,4,4,4,4,8,8,8,4,4,4,4,4,2,2 },
	{ 2,4,4,4,4,8,8,4,4,4,4,1,1,1,1,1,1,1,1,1,4,4,4,8,4,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,4,4,8,4,4,4,4,8,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,2,2,2 },
	{ 2,2,4,4,4,4,4,8,4,4,1,1,1,1,1,1,1,1,1,1,4,4,4,8,8,4,4,4,4,2,5,5,5,5,5,5,5,4,4,4,4,8,8,8,8,4,4,8,4,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,2,2,2,12,5 },
	{ 12,2,2,2,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,8,4,4,2,2,5,5,5,5,5,5,5,2,4,4,4,8,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,4,4,4,4,4,4,2,2,2,12,5,5 },
	{ 5,12,2,2,2,4,4,4,4,8,4,1,1,1,1,1,4,4,4,4,4,4,4,4,8,4,4,4,2,12,5,5,5,5,5,5,12,2,2,4,4,4,4,4,4,4,8,8,8,4,4,1,1,1,1,1,1,4,4,4,4,4,4,2,2,12,5,5,5,5 },
	{ 5,5,12,12,2,2,2,4,4,4,4,8,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,12,5,5,5,5,5,5,5,5,12,2,2,2,4,4,4,4,4,4,4,8,8,4,4,4,4,4,4,4,4,4,4,4,4,4,2,12,5,5,5,5,5 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa5(int** mapa)
{
	int matriz[20][70] = { { 5,5,5,5,5,5,8,8,4,4,4,4,4,4,2,7,7,2,2,7,7,7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,7,7,7,2,2,7,7,2,4,4,4,4,4,4,4,8,8,4,4,12,12,12,5,5,5,5,5,5 },
	{ 5,5,5,5,12,12,12,4,4,4,4,4,4,4,2,7,7,2,2,7,7,7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,7,7,7,2,2,7,7,2,4,4,4,8,4,4,4,4,8,8,4,4,4,12,12,5,5,5,5,5 },
	{ 5,5,5,12,12,4,4,4,4,8,8,8,8,4,2,7,7,2,2,7,7,7,7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,7,7,7,7,2,2,7,7,2,4,8,8,8,8,8,4,4,4,4,4,8,4,4,12,12,5,5,5,5 },
	{ 5,5,12,12,12,4,4,4,8,8,4,4,4,4,2,7,7,2,2,2,7,7,7,7,7,7,2,2,2,2,2,2,2,2,2,2,2,2,7,7,7,7,7,7,2,2,2,7,7,2,4,8,8,4,4,4,4,4,4,4,4,4,8,8,4,12,5,5,5,5 },
	{ 5,5,12,12,4,4,4,4,4,4,4,4,4,4,2,7,7,7,2,2,2,2,2,2,7,7,7,7,2,2,2,2,2,2,2,2,7,7,7,7,2,2,2,2,2,2,7,7,7,2,4,8,8,8,8,4,4,4,4,4,4,4,4,8,4,12,12,5,5,5 },
	{ 12,12,12,12,4,4,8,4,4,4,4,4,4,4,2,2,7,7,7,7,2,2,2,2,2,2,7,7,7,7,7,7,7,7,7,7,7,7,2,2,2,2,2,2,7,7,7,7,2,2,4,4,4,4,4,8,4,4,4,4,4,4,8,8,4,4,12,12,5,5 },
	{ 2,2,4,4,4,4,8,4,4,4,4,4,4,4,4,2,7,7,7,7,7,7,7,7,2,2,7,7,7,2,2,2,2,2,2,7,7,7,2,2,7,7,7,7,7,7,7,7,2,4,4,4,4,4,4,8,4,8,4,4,4,4,8,4,4,4,4,12,5,5 },
	{ 4,4,4,4,4,8,8,4,4,4,4,4,4,4,8,2,2,7,7,7,7,7,7,7,7,2,2,2,2,2,60,60,60,60,2,2,2,2,2,7,7,7,7,7,7,7,7,2,2,4,8,8,4,8,4,4,4,8,4,4,4,4,4,4,4,8,4,12,5,5 },
	{ 8,4,4,4,4,4,4,4,4,4,8,8,4,8,8,4,2,2,2,2,7,7,7,7,7,7,7,7,2,60,60,60,60,60,60,2,7,7,7,7,7,7,7,7,2,2,2,2,4,8,8,4,8,8,4,8,4,8,4,4,4,4,4,8,8,4,4,12,5,5 },
	{ 55,8,8,4,4,4,4,8,8,8,4,4,8,4,4,4,4,4,4,2,2,7,7,7,7,7,7,2,2,60,60,60,60,60,60,2,2,7,7,7,7,7,7,2,2,4,4,4,4,4,4,4,8,4,4,8,8,8,4,4,8,4,4,4,8,8,4,12,5,5 },
	{ 55,4,8,8,8,8,8,8,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,60,60,60,60,60,60,60,60,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,8,4,4,4,8,4,4,4,4,4,2,12,5,5 },
	{ 55,8,4,4,4,4,4,4,4,4,4,8,4,4,4,4,4,4,8,8,4,4,4,4,4,4,4,4,4,4,4,8,8,8,8,4,4,4,4,4,4,4,8,4,4,4,8,4,4,4,4,11,11,11,11,4,4,4,4,8,8,4,4,4,4,4,2,12,5,5 },
	{ 55,8,4,4,4,4,4,4,4,4,8,8,4,4,4,4,4,4,8,4,4,4,4,4,8,4,4,4,4,8,4,8,8,8,4,4,4,4,4,4,8,8,4,4,4,4,8,4,4,4,11,1,1,1,1,11,4,4,8,8,4,4,4,4,4,2,12,12,5,5 },
	{ 55,4,4,4,8,8,4,4,4,8,8,4,4,4,4,4,4,4,8,8,4,4,4,4,4,8,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,4,4,11,1,1,1,1,1,1,11,4,8,4,4,4,4,4,2,2,12,5,5,5 },
	{ 55,4,2,2,4,8,8,4,4,4,8,8,4,4,4,4,4,4,4,8,8,4,4,4,8,4,8,8,4,4,4,4,4,8,8,8,8,8,4,4,8,8,8,8,8,8,4,4,4,2,11,1,1,1,1,11,2,4,4,4,4,4,4,4,2,12,12,5,5,5 },
	{ 55,2,2,2,2,4,4,4,4,4,4,4,8,8,8,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,8,8,8,8,8,8,8,4,4,4,4,4,8,8,4,4,4,2,11,11,11,11,2,4,4,4,4,4,4,4,2,2,12,5,5,5,5 },
	{ 2,2,12,12,2,2,4,4,4,4,4,4,4,4,8,4,8,8,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,4,4,11,2,2,2,2,11,4,4,4,8,4,4,2,2,12,12,5,5,5,5 },
	{ 2,12,12,12,12,2,2,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,8,4,4,4,4,4,8,8,4,4,11,11,11,11,4,4,8,8,8,4,4,2,2,12,5,5,5,5,5 },
	{ 12,12,5,5,12,12,2,2,2,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,8,4,8,8,8,8,8,8,8,8,4,4,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,12,12,5,5,5,5,5 },
	{ 5,5,5,5,5,12,12,2,2,2,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,4,4,4,8,8,8,4,4,4,4,4,4,4,2,2,12,12,5,5,5,5,5,5 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa6(int** mapa)
{
	int matriz[20][70] =
	{ { 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,70,70,70,70,70,70,70,70,70,70,70,70,70,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,18,18,18 },
	{ 18,18,18,18,18,10,18,18,18,18,18,18,18,18,18,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,18,18,18,18,18,18,18 },
	{ 18,18,18,18,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,18,18,18,18,18,18 },
	{ 18,18,18,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,65,65,65,65,65,65,65,65,65,65,65,65,65,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 },
	{ 18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18 } };


	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa7(int** mapa)
{
	int matriz[20][70] =
	{ { 5,5,5,5,5,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,80,80,80,80,80,80,80,80,80,80,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5,5 },
	{ 5,5,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,4,4,8,8,8,8,8,4,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5 },
	{ 5,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,5 },
	{ 8,8,8,8,8,8,8,8,4,8,4,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,11,8,8,8,8,8,8,8,4,8,8,8,8,5 },
	{ 2,8,8,8,8,8,8,4,11,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,11,4,4,4,4,8,8,8,8,8,8,4,8,8,8,8,8 },
	{ 2,2,2,8,8,8,4,4,4,4,4,11,4,8,8,8,8,8,8,4,8,8,8,8,8,8,4,8,8,8,8,14,4,4,4,4,3,8,8,8,4,8,8,8,8,8,4,8,8,8,8,8,4,4,4,4,11,4,4,8,8,8,8,8,8,8,8,4,8,8 },
	{ 5,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,6,6,6,6,14,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2 },
	{ 5,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,6,6,6,6,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2 },
	{ 5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,6,6,6,6,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,6,6,6,6,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,6,6,6,6,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,6,6,6,6,14,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5 },
	{ 5,5,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,14,4,4,4,4,14,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,4,8,8,8,8,4,8,8,8,8,8,8,4,8,8,8,5 },
	{ 5,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,4,8,8,8,8,4,8,8,8,4,8,8,8,4,4,4,4,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
	{ 5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,4,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,4,8,8,8,8,8,8,2 },
	{ 5,2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,11,4,4,11,8,8,8,8,2,2 },
	{ 5,2,2,8,8,4,8,8,8,8,4,8,11,8,4,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,4,8,8,8,8,8,4,4,4,4,4,4,4,8,8,2,2,5 },
	{ 5,2,2,2,8,8,8,8,8,11,4,4,4,4,4,4,8,8,4,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,2,2,5,5 },
	{ 5,5,2,2,2,8,8,8,4,4,4,11,4,4,11,4,4,8,8,8,8,8,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,2,2,5,5,5 },
	{ 5,5,5,5,2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,2,5,5,5,5 } };



	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void Mapa8(int** mapa)
{
	int matriz[20][70] =
	{ { 5,5,5,5,5,5,5,5,5,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,4,8,8,8,8,8,8,8,8,11,4,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,8,4,8,8,8,4,4,4,5,5,5,5,5 },
	{ 5,5,5,5,5,5,4,4,4,8,8,8,8,8,8,8,4,4,4,4,4,8,8,8,8,8,8,8,8,3,3,4,4,4,4,4,4,4,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,4,8,8,8,8,4,4,5,5,5,5 },
	{ 5,5,5,5,5,5,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,4,4,4,4,4,4,4,4,4,3,3,8,8,8,8,8,8,8,8,8,8,8,8,4,11,4,4,4,11,4,8,8,8,8,4,5,5,5,5 },
	{ 5,5,5,5,5,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,4,4,4,4,4,4,4,4,4,4,4,4,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,5,5,5,5 },
	{ 5,5,5,5,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,4,4,4,4,4,4,4,4,4,4,4,4,3,8,8,8,8,8,8,8,8,8,8,3,3,3,3,8,8,8,8,8,8,8,8,8,4,5,5,5,5 },
	{ 5,5,5,5,4,8,8,8,8,8,8,8,8,8,4,8,4,8,8,8,8,8,8,8,8,8,8,8,3,4,4,4,4,4,4,4,4,4,4,4,4,3,8,8,8,8,8,8,8,8,3,3,3,5,5,3,3,3,8,8,8,8,8,8,8,4,4,5,5,5 },
	{ 5,5,5,4,4,8,8,8,8,8,8,8,8,4,11,4,4,4,8,8,8,8,8,8,8,8,8,8,3,3,4,4,4,4,4,4,4,4,4,4,3,3,8,8,8,8,8,8,8,8,3,5,5,5,5,5,5,3,3,8,8,8,8,8,8,8,4,5,5,5 },
	{ 5,5,5,4,8,8,8,8,8,8,8,8,11,4,4,4,4,11,4,8,8,8,8,4,4,8,8,8,8,3,3,3,3,4,4,4,4,4,3,3,3,8,8,8,8,8,8,8,8,8,3,3,5,5,5,5,5,5,3,8,4,8,4,8,8,8,4,12,5,5 },
	{ 5,5,12,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,11,4,8,8,8,8,8,3,3,4,4,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,3,3,5,5,5,5,3,3,11,4,4,4,4,8,8,4,12,5,5 },
	{ 5,5,12,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,11,4,4,4,4,4,8,8,8,8,8,3,4,4,3,8,8,8,8,8,8,8,8,8,8,11,8,4,8,8,3,3,3,3,3,3,4,4,4,4,11,4,4,8,4,12,5,5 },
	{ 5,5,12,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,11,4,8,8,8,8,8,8,3,4,4,3,8,8,8,8,8,8,8,8,8,4,4,4,11,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,12,5,5 },
	{ 5,5,12,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,3,3,4,4,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,2,12,5,5 },
	{ 5,5,12,2,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,2,8,8,8,8,8,8,8,3,4,4,4,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,2,2,12,5,5 },
	{ 5,5,12,2,2,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,2,2,3,8,8,8,8,8,8,3,4,4,4,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,2,2,12,12,5,5 },
	{ 5,5,12,12,2,2,4,4,8,8,8,8,8,8,8,8,4,8,11,8,8,8,3,2,2,3,3,8,8,8,8,8,3,3,4,4,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,2,2,12,12,5,5,5 },
	{ 5,5,5,12,12,2,2,4,4,8,8,8,8,8,8,11,4,4,4,4,8,8,3,3,3,3,8,8,8,8,8,8,3,4,4,4,3,3,8,8,8,8,8,8,8,8,8,8,8,11,4,4,8,8,8,8,8,8,8,8,4,4,2,2,12,12,5,5,5,5 },
	{ 5,5,5,5,12,12,2,2,4,4,4,8,8,8,4,4,4,11,4,4,4,8,8,8,8,8,8,8,8,8,3,3,3,4,4,4,4,3,3,3,8,8,8,8,8,8,8,8,4,4,4,4,11,8,8,8,8,8,8,8,4,2,2,12,12,5,5,5,5,5 },
	{ 5,5,5,5,5,12,12,2,2,2,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,85,85,85,85,85,85,85,4,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4,4,2,12,12,5,5,5,5,5,5 } };


	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void mapacargando(int** mapa)
{
	int matriz[20][70] = { { 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11 },
	{ 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 } };

	for (int i = 0; i < 20; i++)
		for (int j = 0; j < 70; j++)
			mapa[i][j] = matriz[i][j];
	Dibujar_mapa1(mapa);
}

void cargandojuego(int** mapa)
{
	mapacargando(mapa);
	Console::SetCursorPosition(6, 2); cout << "    __   ____  ____    ____   ____  ____   ___     ___  " << endl;
	Console::SetCursorPosition(6, 3); cout << "   /  ] /    ||    \\  /    | /    ||    \\ |   \\   /   \\ " << endl;
	Console::SetCursorPosition(6, 4); cout << "  /  / |  o  ||  D  )|   __||  o  ||  _  ||    \\ |     |" << endl;
	Console::SetCursorPosition(6, 5); cout << " /  /  |     ||    / |  |  ||     ||  |  ||  D  ||  O  |" << endl;
	Console::SetCursorPosition(6, 6); cout << "/   \\_ |  _  ||    \\ |  |_ ||  _  ||  |  ||     ||     |" << endl;
	Console::SetCursorPosition(6, 7); cout << "\\     ||  |  ||  .  \\|     ||  |  ||  |  ||     ||     |" << endl;
	Console::SetCursorPosition(6, 8); cout << " \\___ ||__|__||__|\\_||___._||__|__||__|__||_____| \\___/ " << endl;
	for (int i = 0; i <= 25; i++)
	{
		Console::SetCursorPosition(22 + i, 11);
		Console::ForegroundColor = ConsoleColor::White;
		cout << char(219);
		Sleep(200);
	}
	Console::SetCursorPosition(20, 15);
	Console::BackgroundColor = ConsoleColor::Black;
	Console::ForegroundColor = ConsoleColor::White;
	cout << "Presione una tecla para jugar...";
	_getch();
}

void instrucciones()
{
	Console::Clear();
	Console::SetCursorPosition(22, 6);
	cout << "ZUXBOT: PERDIDO EN LA TIERRA" << endl;
	Console::SetCursorPosition(1, 8); cout << " En este juego tomas el control de ZuXBot, un androide alienigenina";
	Console::SetCursorPosition(1, 9); cout << " bebe que por un fallo de la nave en donde viajaba, se quedo varado";
	Console::SetCursorPosition(1, 10); cout << "  en el planeta Tierra. La unica manera de que ZuXBot regrese a su";
	Console::SetCursorPosition(1, 11); cout << "  planeta es activando el localizador para que la nave nodriza lo";
	Console::SetCursorPosition(1, 12); cout << "     recoja.Tu mision es ayudarlo a conseguir las 3 piezas del";
	Console::SetCursorPosition(1, 13); cout << "   localizador que necesita armar para que pueda regresar a casa.";
	Console::SetCursorPosition(1, 19); cout << "El destino de ZuXBot depende de ti...";
	_getch();
	_getch();

	Console::Clear();
	Console::SetCursorPosition(22, 6);
	cout << "ZUXBOT: PERDIDO EN LA TIERRA" << endl;
	Console::SetCursorPosition(1, 1); cout << "Controla a ZuXBot usando las flechas direccionales de tu teclado.";
	Console::SetCursorPosition(1, 3); cout << "Es necesario que comas los chocolates para que puedas avanzar";
	Console::SetCursorPosition(1, 4); cout << "de un escenario a otro, ademas aumentan tu energia.";
	Console::SetCursorPosition(1, 6); cout << "Cada vez que recolectes 7 chocolates, aparecera una pieza del";
	Console::SetCursorPosition(1, 7); cout << "localizador a la cual podras acceder yendo a alguno de los agujeros.";
	Console::SetCursorPosition(1, 9); cout << "Evita tocar las flores, te disminuyen la energia.";
	Console::SetCursorPosition(1, 11); cout << "Cuando recolectes las 3 piezas del localizador, ZuXBot llamara";
	Console::SetCursorPosition(1, 12); cout << "a la nave nodriza y tendras 30 segundos para llegar al mapa en donde";
	Console::SetCursorPosition(1, 13); cout << "se encuentra la señal para que seas recogido.";
	Console::SetCursorPosition(1, 15); cout << "El juego termina cuando ZuxBot regrese a su planeta natal o se";
	Console::SetCursorPosition(1, 16); cout << "te acabe la energia.";
	Console::SetCursorPosition(51, 18); cout << "Buena suerte!";

	_getch();
}

void generarChocolate(int** mapa, int& f, int& c, int& f2, int& c2)
{
	Random r, p;

	do {
		c = r.Next(1, 68);
		f = p.Next(1, 18);
	} while (mapa[f][c] == 2 || mapa[f][c] == 5 || mapa[f][c] == 14 || mapa[f][c] == 12 || mapa[f][c] == 10 || mapa[f][c] == 9 || mapa[f][c] == 7 || mapa[f][c] == 16 || mapa[f][c] == 1 || mapa[f][c] == 6 || mapa[f][c] == 11 || mapa[f][c] == 17 || mapa[f][c] == 71 || mapa[f][c] == 60 || mapa[f][c] == 65 || mapa[f][c] == 70);

	Console::SetCursorPosition(c, f);
	Console::BackgroundColor = ConsoleColor::DarkRed;
	Console::ForegroundColor = ConsoleColor::Magenta;
	cout << char(254);

	/*Random q, s;
	do {
		c2 = q.Next(1, 68);
		f2 = s.Next(1, 18);
	} while (mapa[f2][c2] == 2 || mapa[f2][c2] == 5 || mapa[f2][c2] == 14 || mapa[f2][c2] == 12 || mapa[f2][c2] == 10 || mapa[f2][c2] == 9 || mapa[f2][c2] == 7 || mapa[f2][c2] == 16 || mapa[f2][c2] == 1 || mapa[f2][c2] == 6 || mapa[f2][c2] == 11 || mapa[f2][c2] == 17 || mapa[f2][c2] == 71 || mapa[f2][c2] == 60 || mapa[f2][c2] == 65 || mapa[f2][c2] == 70);

	Console::SetCursorPosition(c2, f2);
	Console::ForegroundColor = ConsoleColor::White;
	cout << char(219);
	*/
}

void generarFlor(int** mapa, int& f2, int& c2)
{
	Random r, p;


}

void aumentar_energia(int** mapa, int& energia, int& f, int& c, int x, int y, int& contChoco, bool& chocolateComido)
{
	Console::SetCursorPosition(x, y);
	if (x == c && y == f)
	{
		energia += 300;
		f = c = -1;
		contChoco++;
		chocolateComido = true;
	}

	Console::SetCursorPosition(x, y - 1);
	if (x == c && y - 1 == f)
	{
		energia += 300;
		f = c = -1;
		contChoco++;
		chocolateComido = true;
	}

	Console::SetCursorPosition(x - 1, y - 1);
	if (x - 1 == c && y - 1 == f)
	{
		energia += 300;
		f = c = -1;
		contChoco++;
		chocolateComido = true;
	}

	Console::SetCursorPosition(x + 1, y - 1);
	if (x + 1 == c && y - 1 == f)
	{
		energia += 300;
		f = c = -1;
		contChoco++;
		chocolateComido = true;
	}

	Console::SetCursorPosition(x, y - 2);
	if (x == c && y - 2 == f)
	{
		energia += 300;
		f = c = -1;
		contChoco++;
		chocolateComido = true;
	}

}

void generarPieza(int** mapa, int contChoco, bool hueco, bool& pieza, int contPiezas, int f3, int c3)
{
	if ((contChoco >= 7 && contChoco < 14 && contPiezas == 0) || (contChoco >= 14 && contChoco < 21 && contPiezas == 1) || (contChoco >= 21 && contPiezas == 2))
	{
		Console::SetCursorPosition(17, 18);
		Console::ForegroundColor = ConsoleColor::Cyan;
		cout << char(219);
	}
}

void aumentarPieza(int** mapa, int x, int y, int& contPiezas, bool& pieza, int& f3, int& c3, bool hueco, int contChoco)
{
	if ((contPiezas == 0 && contChoco == 7) || (contPiezas == 2 && contChoco == 21) || (contPiezas == 1 && contChoco == 14))
	{
		f3 = 18;
		c3 = 17;
	}
	Console::SetCursorPosition(x, y);
	if (x == c3 && y == f3)
	{
		f3 = -1;
		c3 = -1;
		contPiezas++;
	}
}

void barra_energia(int** mapa, int energia, int contChoco, int contPiezas)
{
	if (energia < 500)
	{
		Console::SetCursorPosition(1, 20);
		Console::ForegroundColor = ConsoleColor::Black;
		Console::BackgroundColor = ConsoleColor::Black;
		cout << "                          ";
		Console::SetCursorPosition(1, 20);
		Console::ForegroundColor = ConsoleColor::Red;
		Console::BackgroundColor = ConsoleColor::Black;
		cout << "Energia: " << energia;
	}
	else
	{
		Console::SetCursorPosition(1, 20);
		Console::ForegroundColor = ConsoleColor::Black;
		Console::BackgroundColor = ConsoleColor::Black;
		cout << "                          ";
		Console::SetCursorPosition(1, 20);
		Console::ForegroundColor = ConsoleColor::White;
		Console::BackgroundColor = ConsoleColor::Black;
		cout << "Energia: " << energia;
	}

	Console::SetCursorPosition(20, 20);
	Console::ForegroundColor = ConsoleColor::Black;
	Console::BackgroundColor = ConsoleColor::Black;
	cout << "                          ";
	Console::SetCursorPosition(20, 20);
	Console::ForegroundColor = ConsoleColor::White;
	Console::BackgroundColor = ConsoleColor::Black;
	cout << "Chocolates: " << contChoco;

	Console::SetCursorPosition(40, 20);
	Console::ForegroundColor = ConsoleColor::Black;
	Console::BackgroundColor = ConsoleColor::Black;
	cout << "                          ";
	Console::SetCursorPosition(40, 20);
	Console::ForegroundColor = ConsoleColor::White;
	Console::BackgroundColor = ConsoleColor::Black;
	cout << "Piezas: " << contPiezas;
}

void borrarpersonaje1(int x, int y, int** mapa, int numeroMapa, bool hueco)
{
	if (hueco == true)
	{
		Console::SetCursorPosition(x, y);
		switch (mapa[y][x])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(64);
			break;
		}

		Console::SetCursorPosition(x, y - 1);
		switch (mapa[y - 1][x])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;
		}

		Console::SetCursorPosition(x - 1, y - 1);
		switch (mapa[y - 1][x - 1])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(47);
			break;
		}

		Console::SetCursorPosition(x + 1, y - 1);
		switch (mapa[y - 1][x + 1])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(92);
			break;
		}

		Console::SetCursorPosition(x, y - 2);
		switch (mapa[y - 2][x])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(153);
			break;
		}
	}
	else if (numeroMapa == 1 || numeroMapa == 2 || numeroMapa == 3 || numeroMapa == 4 || numeroMapa == 5 || numeroMapa == 7 || numeroMapa == 8) {
		Console::SetCursorPosition(x, y);
		switch (mapa[y][x])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << " ";
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::DarkRed;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << " ";
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::DarkYellow;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << " ";
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Green;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << " ";
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Cyan;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << " ";
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Blue;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << " ";
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::DarkMagenta;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << " ";
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::DarkGreen;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << " ";
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::DarkGray;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << " ";
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << " ";
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Red;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << " ";
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::DarkCyan;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << " ";
			break;
		}

		Console::SetCursorPosition(x, y - 1);
		switch (mapa[y - 1][x])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << " ";
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::DarkRed;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << " ";
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::DarkYellow;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << " ";
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Green;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << " ";
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Cyan;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << " ";
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Blue;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << " ";
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::DarkMagenta;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << " ";
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::DarkGreen;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << " ";
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::DarkGray;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << " ";
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << " ";
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Red;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << " ";
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::DarkCyan;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << " ";
			break;
		}

		Console::SetCursorPosition(x - 1, y - 1);
		switch (mapa[y - 1][x - 1])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << " ";
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::DarkRed;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << " ";
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::DarkYellow;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << " ";
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Green;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << " ";
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Cyan;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << " ";
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Blue;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << " ";
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::DarkMagenta;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << " ";
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::DarkGreen;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << " ";
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::DarkGray;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << " ";
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << " ";
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Red;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << " ";
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::DarkCyan;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << " ";
			break;
		}

		Console::SetCursorPosition(x + 1, y - 1);
		switch (mapa[y - 1][x + 1])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << " ";
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::DarkRed;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << " ";
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::DarkYellow;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << " ";
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Green;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << " ";
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Cyan;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << " ";
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Blue;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << " ";
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::DarkMagenta;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << " ";
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::DarkGreen;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << " ";
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::DarkGray;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << " ";
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << " ";
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Red;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << " ";
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::DarkCyan;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << " ";
			break;
		}

		Console::SetCursorPosition(x, y - 2);
		switch (mapa[y - 2][x])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << " ";
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::DarkRed;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << " ";
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::DarkYellow;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << " ";
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Green;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << " ";
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Cyan;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << " ";
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Blue;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << " ";
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::DarkMagenta;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << " ";
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::DarkGreen;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << " ";
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::DarkGray;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << " ";
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << " ";
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Red;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << " ";
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::DarkCyan;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << " ";
			break;
		}
	}

}

void dibujarpersonaje1(int x, int y, int** mapa, int numeroMapa, bool hueco)
{
	if (hueco == true)
	{
		Console::SetCursorPosition(x, y);
		switch (mapa[y][x])
		{
		case 18: case 19:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(64);
			break;
		}

		Console::SetCursorPosition(x, y - 1);
		switch (mapa[y - 1][x])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;
		}

		Console::SetCursorPosition(x - 1, y - 1);
		switch (mapa[y - 1][x - 1])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(47);
			break;
		}

		Console::SetCursorPosition(x + 1, y - 1);
		switch (mapa[y - 1][x + 1])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(92);
			break;
		}

		Console::SetCursorPosition(x, y - 2);
		switch (mapa[y - 2][x])
		{
		case 18:case 19:
			Console::ForegroundColor = ConsoleColor::Gray;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(153);
			break;
		}
	}
	else if (numeroMapa == 1 || numeroMapa == 2 || numeroMapa == 3 || numeroMapa == 4 || numeroMapa == 5 || numeroMapa == 7 || numeroMapa == 8) {
		Console::SetCursorPosition(x, y);
		switch (mapa[y][x])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(64);
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << char(64);
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << char(64);
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << char(64);
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << char(64);
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << char(64);
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << char(64);
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << char(64);
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << char(64);
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << char(64);
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << char(64);
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << char(64);
			break;
		}

		Console::SetCursorPosition(x, y - 1);
		switch (mapa[y - 1][x])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(178);
			break;
		}

		Console::SetCursorPosition(x - 1, y - 1);
		switch (mapa[y - 1][x - 1])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(47);
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << char(47);
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << char(47);
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << char(47);
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << char(47);
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << char(47);
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << char(47);
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << char(47);
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << char(47);
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << char(47);
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << char(47);
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << char(47);
			break;
		}

		Console::SetCursorPosition(x + 1, y - 1);
		switch (mapa[y - 1][x + 1])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(92);
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << char(92);
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << char(92);
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << char(92);
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << char(92);
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << char(92);
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << char(92);
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << char(92);
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << char(92);
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << char(92);
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << char(92);
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << char(92);
			break;
		}

		Console::SetCursorPosition(x, y - 2);
		switch (mapa[y - 2][x])
		{
		case 1:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Black;
			cout << char(153);
			break;

		case 2:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkRed;
			cout << char(153);
			break;

		case 3: case 14:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkYellow;
			cout << char(153);
			break;

		case 4:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Green;
			cout << char(153);
			break;

		case 5:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Cyan;
			cout << char(153);
			break;

		case 6:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Blue;
			cout << char(153);
			break;

		case 7:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkMagenta;
			cout << char(153);
			break;

		case 8:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGreen;
			cout << char(153);
			break;

		case 9:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkGray;
			cout << char(153);
			break;

		case 10:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Gray;
			cout << char(153);
			break;

		case 11:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::Red;
			cout << char(153);
			break;

		case 12:
			Console::ForegroundColor = ConsoleColor::Black;
			Console::BackgroundColor = ConsoleColor::DarkCyan;
			cout << char(153);
			break;
		}
	}
}

void moverpersonaje1(int& x, int& y, int dx, int dy, int** matriz, int numeroMapa, int& energia, bool hueco)
{
	Random r;//energia
	dx = dy = 0;

	if (_kbhit())
	{
		char teclapresionada = _getch();
		teclapresionada = toupper(teclapresionada);
		switch (teclapresionada)
		{
		case 72: dy = -1; dx = 0; break;
		case 80: dy = 1;  dx = 0; break;
		case 75: dx = -1; dy = 0; break;
		case 77: dx = 1;  dy = 0;
		}
	}

	//restricciones
	if (x + dx < 1 || x + dx>68 || matriz[y][x + dx] == 5 || matriz[y][x + dx] == 2 || matriz[y][x + dx] == 14 || matriz[y][x + dx] == 12 || matriz[y][x + dx] == 10 || matriz[y][x + dx] == 9 || matriz[y][x + dx] == 7 || matriz[y][x + dx] == 12 || matriz[y][x + dx] == 16)
	{
		dx = 0;
	}

	if (y + dy < 2 || y + dy>19 || matriz[y + dy][x] == 5 || matriz[y + dy][x] == 2 || matriz[y + dy][x] == 14 || matriz[y + dy][x] == 14 || matriz[y + dy][x] == 10 || matriz[y + dy][x] == 9 || matriz[y + dy][x] == 7 || matriz[y + dy][x] == 12 || matriz[y + dy][x] == 16)
	{
		dy = 0;
	}
	x = x + dx;
	y = y + dy;


	dibujarpersonaje1(x, y, matriz, numeroMapa, hueco);
	Sleep(20);//retardo
	borrarpersonaje1(x, y, matriz, numeroMapa, hueco);

	//disminucion de energia:
	if (dx != 0 || dy != 0)
		energia = energia - r.Next(5, 11);
}

void gameOver()
{
	Console::Clear();
	Console::ForegroundColor = ConsoleColor::White;

	Console::SetCursorPosition(8, 3); cout << " ::::::::      :::     ::::    ::::  ::::::::::";
	Console::SetCursorPosition(8, 4); cout << ":+:    :+:   :+: :+:   +:+:+: :+:+:+ :+:		";
	Console::SetCursorPosition(8, 5); cout << "+:+         +:+   +:+  +:+ +:+:+ +:+ +:+		";
	Console::SetCursorPosition(8, 6); cout << ":#:        +#++:++#++: +#+  +:+  +#+ +#++:++#	";
	Console::SetCursorPosition(8, 7); cout << "+#+   +#+# +#+     +#+ +#+       +#+ +#+		";
	Console::SetCursorPosition(8, 8); cout << "#+#    #+# #+#     #+# #+#       #+# #+#       ";
	Console::SetCursorPosition(8, 9); cout << " ########  ###     ### ###       ### ##########";


	Console::SetCursorPosition(8, 11); cout << "         ::::::::  :::     ::: :::::::::: :::::::::  ";
	Console::SetCursorPosition(8, 12); cout << "        :+:    :+: :+:     :+: :+:        :+:    :+: ";
	Console::SetCursorPosition(8, 13); cout << "        +:+    +:+ +:+     +:+ +:+        +:+    +:+ ";
	Console::SetCursorPosition(8, 14); cout << "        +#+    +:+ +#+     +:+ +#++:++#   +#++:++#:  ";
	Console::SetCursorPosition(8, 15); cout << "        +#+    +#+  +#+   +#+  +#+        +#+    +#+ ";
	Console::SetCursorPosition(8, 16); cout << "        #+#    #+#   #+#+#+#   #+#        #+#    #+# ";
	Console::SetCursorPosition(8, 17); cout << "         ########      ###     ########## ###    ### ";
	_getch();
}

void creditos()
{
	Console::Clear();
	Console::BackgroundColor = ConsoleColor::Black;
	Console::ForegroundColor = ConsoleColor::White;
	Console::SetCursorPosition(30, 4); cout << "Hecho por:";
	Console::SetCursorPosition(28, 12); cout << "Franco Zapata";
	Console::SetCursorPosition(27, 14); cout << "Juanelv Salgado";
	_getch();
	_getch();

	Console::Clear();
	Console::BackgroundColor = ConsoleColor::Black;
	Console::ForegroundColor = ConsoleColor::White;
	Console::SetCursorPosition(32, 9); cout << "Curso:";
	Console::SetCursorPosition(28, 11); cout << "Programacion I";
	_getch();
	_getch();


	Console::Clear();
	Console::BackgroundColor = ConsoleColor::Black;
	Console::ForegroundColor = ConsoleColor::White;
	Console::SetCursorPosition(11, 8); cout << "Universidad Peruana de Ciencias Aplicadas (UPC)";
	Console::SetCursorPosition(27, 12); cout << "Seccion: SS1A";
	_getch();
	_getch();

	Console::Clear();
	Console::BackgroundColor = ConsoleColor::Black;
	Console::ForegroundColor = ConsoleColor::White;
	Console::SetCursorPosition(26, 8); cout << "Gracias por Jugar";
	Console::SetCursorPosition(20, 18); cout << "Presiona una tecla para salir";
	_getch();
	_getch();
}

void animacion_final()
{
	for (int i = 4; i <= 10; i++)
	{
		Console::SetCursorPosition(35, i - 4);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << "       ";

		Console::SetCursorPosition(35, i - 3);
		Console::ForegroundColor = ConsoleColor::Blue;
		cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);

		Console::SetCursorPosition(34, i - 3);
		Console::ForegroundColor = ConsoleColor::DarkCyan;
		cout << " ";

		Console::SetCursorPosition(42, i - 3);
		Console::ForegroundColor = ConsoleColor::DarkCyan;
		cout << " ";

		Console::SetCursorPosition(34, i - 2);
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);

		Console::SetCursorPosition(36, 0 + i - 1);
		Console::ForegroundColor = ConsoleColor::Yellow;
		cout << char(219) << char(219) << char(219) << char(219) << char(219);

		Console::SetCursorPosition(37, i);
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(219) << char(219) << char(219);
		Sleep(400);
	}

	for (int y = 18; y >= 10; y--)
	{
		Console::SetCursorPosition(33, 0 + y + 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << " ";
		Console::SetCursorPosition(33, 0 + y - 2);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::Black;
		cout << char(153);

		Console::SetCursorPosition(33, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::Black;
		cout << char(178);

		Console::SetCursorPosition(33 - 1, 0 + y);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << " ";

		Console::SetCursorPosition(33 - 1, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::Black;
		cout << char(47);

		Console::SetCursorPosition(33 + 1, 0 + y);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << " ";

		Console::SetCursorPosition(33 + 1, 0 + y - 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::Black;
		cout << char(92);

		Console::SetCursorPosition(33, 0 + y);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::Black;
		cout << char(64);
		Sleep(500);
	}

	Console::SetCursorPosition(32, 8);
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219);

	Console::SetCursorPosition(32, 9);
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219) << char(219);

	Console::SetCursorPosition(32, 10);
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219) << char(219);

	for (int i = 10; i >= 3; i--)
	{

		Console::SetCursorPosition(35, i - 3);
		Console::ForegroundColor = ConsoleColor::Blue;
		cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);

		Console::SetCursorPosition(34, i - 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << "  ";

		Console::SetCursorPosition(41, i - 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << "  ";

		Console::SetCursorPosition(34, i - 2);
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);

		Console::SetCursorPosition(36, 0 + i - 1);
		Console::ForegroundColor = ConsoleColor::Yellow;
		cout << char(219) << char(219) << char(219) << char(219) << char(219);

		Console::SetCursorPosition(36, i);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << " ";

		Console::SetCursorPosition(40, i);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << " ";

		Console::SetCursorPosition(37, i + 1);
		Console::BackgroundColor = ConsoleColor::DarkGreen;
		Console::ForegroundColor = ConsoleColor::DarkGreen;
		cout << "   ";

		Console::SetCursorPosition(37, i);
		Console::ForegroundColor = ConsoleColor::Gray;
		cout << char(219) << char(219) << char(219);
		Sleep(600);
	}

	Console::SetCursorPosition(34, 0);
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);
	Console::SetCursorPosition(34, 1);
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);
	Console::SetCursorPosition(34, 2);
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);
	Console::SetCursorPosition(34, 3);
	Console::BackgroundColor = ConsoleColor::DarkGreen;
	Console::ForegroundColor = ConsoleColor::DarkGreen;
	cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);
}

int ganarJuego(int** matriz, int contPiezas, int contChoco, int x, int y, int numeroMapa)
{
	if (contPiezas == 3 && numeroMapa == 8)
	{
		animacion_final();
		numeroMapa == 9;
		return 1;
	}
	else return 0;
}


void controlador1(int& xpersonaje, int& ypersonaje, int dx, int dy, int** matriz, int& numeroMapa, int& energia, int f,
	int c, int f2, int c2, int f3, int c3, int contChoco, bool& hueco, int opcionMenu, bool& chocolateComido, int contPiezas, bool& pieza)
{

	while (energia > 0)
	{
		moverpersonaje1(xpersonaje, ypersonaje, dx, dy, matriz, numeroMapa, energia, hueco);
		barra_energia(matriz, energia, contChoco, contPiezas);
		aumentar_energia(matriz, energia, f, c, xpersonaje, ypersonaje, contChoco, chocolateComido);
		//generarPieza(matriz, contChoco, hueco, pieza, contPiezas);
		aumentarPieza(matriz, xpersonaje, ypersonaje, contPiezas, pieza, f3, c3, hueco, contChoco);
		if (ganarJuego(matriz, contPiezas, contChoco, xpersonaje, ypersonaje, numeroMapa) == 1)
			break;

		//CAMBIO DE MAPAS:

		//transportarse al hueco
		if (matriz[ypersonaje][xpersonaje] == 1)
		{
			MapaHuecos(matriz);
			xpersonaje = 35;
			ypersonaje = 18;
			hueco = true;
			generarPieza(matriz, contChoco, hueco, pieza, contPiezas, f3, c3);
			animacion_caida(matriz, xpersonaje, ypersonaje);
		}


		//transportarse a cada mapa desde el hueco:
		if (matriz[ypersonaje][xpersonaje] == 19)
		{

			animacion_subida(matriz, xpersonaje, ypersonaje, energia);

			switch (numeroMapa)
			{
			case 1:
				Mapa1(matriz);
				generarChocolate(matriz, f, c, f2, c2);
				xpersonaje = 43;
				ypersonaje = 12;
				hueco = false;
				break;

			case 2:
				Mapa2(matriz);
				generarChocolate(matriz, f, c, f2, c2);
				xpersonaje = 43;
				ypersonaje = 12;
				hueco = false;
				break;

			case 3:
				Mapa3(matriz);
				generarChocolate(matriz, f, c, f2, c2);
				xpersonaje = 43;
				ypersonaje = 12;
				hueco = false;
				break;

			case 4:
				Mapa4(matriz);
				generarChocolate(matriz, f, c, f2, c2);
				xpersonaje = 35;
				ypersonaje = 8;
				hueco = false;
				break;

			case 5:
				Mapa5(matriz);
				generarChocolate(matriz, f, c, f2, c2);
				xpersonaje = 43;
				ypersonaje = 12;
				hueco = false;
			}
		}

		//transportarse entre los mapas:
		else if (matriz[ypersonaje][xpersonaje + 1] == 20 && chocolateComido == true)
		{
			Mapa2(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 3;
			ypersonaje = 13;
			numeroMapa = 2;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje - 1] == 25 && chocolateComido == true)
		{
			Mapa1(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 67;
			ypersonaje = 13;
			numeroMapa = 1;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje + 1] == 30 && chocolateComido == true)
		{
			Mapa3(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 3;
			ypersonaje = 13;
			numeroMapa = 3;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje - 1] == 35 && chocolateComido == true)
		{
			Mapa2(matriz);
			generarChocolate(matriz, f2, c2, f2, c2);
			xpersonaje = 67;
			ypersonaje = 13;
			numeroMapa = 2;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje + 1] == 40 && chocolateComido == true)
		{
			Mapa4(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 3;
			ypersonaje = 13;
			numeroMapa = 4;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje - 1] == 45 && chocolateComido == true)
		{
			Mapa3(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 67;
			ypersonaje = 13;
			numeroMapa = 3;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje + 1] == 50 && chocolateComido == true)
		{
			Mapa5(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 3;
			ypersonaje = 13;
			numeroMapa = 5;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje - 1] == 55 && chocolateComido == true)
		{
			Mapa4(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 67;
			ypersonaje = 13;
			numeroMapa = 4;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje] == 60 && chocolateComido == true)
		{
			Mapa6(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 35;
			ypersonaje = 16;
			numeroMapa = 6;
			hueco = true;//para poder dibujar en el area negra
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje] == 65 && chocolateComido == true)
		{
			Mapa5(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 35;
			ypersonaje = 16;
			numeroMapa = 5;
			hueco = false;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje - 1][xpersonaje] == 70 && chocolateComido == true)
		{
			Mapa7(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 33;
			ypersonaje = 18;
			numeroMapa = 7;
			hueco = false;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje - 1][xpersonaje] == 75 && chocolateComido == true)
		{
			Mapa6(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 35;
			ypersonaje = 6;
			numeroMapa = 6;
			hueco = true;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje - 2][xpersonaje] == 80 && chocolateComido == true)
		{
			Mapa8(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 35;
			ypersonaje = 17;
			numeroMapa = 8;
			hueco = false;
			chocolateComido = false;
		}
		else if (matriz[ypersonaje][xpersonaje] == 85 && chocolateComido == true)
		{
			Mapa7(matriz);
			generarChocolate(matriz, f, c, f2, c2);
			xpersonaje = 33;
			ypersonaje = 6;
			numeroMapa = 7;
			hueco = false;
			chocolateComido = false;
		}
		//FIN CAMBIO MAPA
	}
	_getch();
	_getch();
}

void main()
{
	Console::SetWindowSize(80, 21);
	Console::CursorVisible = false;

	int** matriz, xpersonaje, ypersonaje, dx, dy, numeroMapa, yChocolate, xChocolate, energia, opcionMenu, yFlor, xFlor, yPieza, xPieza;
	int contChoco = 20;
	int contPiezas = 2;
	int seleccionCursor = 10;
	opcionMenu = 1;
	numeroMapa = -1;
	bool hueco = false;
	bool chocolateComido = false;
	bool pieza = false;
	energia = 5000;
	yPieza = -1;
	xPieza = -1;
	xChocolate = yChocolate = yFlor = xFlor = 0;


	//Redimensionar venta 80*21
	matriz = new int* [25];
	for (int i = 0; i < 25; i++)
		matriz[i] = new int[80];

	menu(matriz);

	while (numeroMapa == -1)
		cursorMenu(opcionMenu, numeroMapa, seleccionCursor);

	if (numeroMapa == 1) {
		delete[]matriz;


		//Redimensionar ventana 70*21
		Console::SetWindowSize(70, 21);
		matriz = new int* [25];
		for (int i = 0; i < 25; i++)
			matriz[i] = new int[80];

		cargandojuego(matriz);
		//musica();
		instrucciones();
		_getch();
		xpersonaje = 43;
		ypersonaje = 12;
		dx = dy = 0;
		Mapa1(matriz);
		generarChocolate(matriz, yChocolate, xChocolate, yFlor, xFlor);
		controlador1(xpersonaje, ypersonaje, dx, dy, matriz, numeroMapa, energia, yChocolate, xChocolate, yFlor, xFlor, yPieza, xPieza, contChoco, hueco, opcionMenu, chocolateComido, contPiezas, pieza);
	}
	if (contPiezas != 3) {
		gameOver();
		_getch();
		creditos();
	}
	else {
		creditos();
	}
}